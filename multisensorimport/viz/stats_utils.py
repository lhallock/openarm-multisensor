#!/usr/bin/env python3
"""Utility functions for basic dataframe statistics (mean, stdev, etc.)."""
import pandas as pd
from multisensorimport.dataobj import trialdata as td

# list of tracker identifiers
TRACKER_STRINGS = ('LK', 'FRLK', 'BFLK-G', 'BFLK-T', 'SBLK-G', 'SBLK-T')

def gen_corr_df(data_dir, subj_dirs, trial_filename):
    """Aggregate correlation values from multiple subjects.

    Args:
        data_dir (str): path to high-level data directory
        subj_dirs (list): list of all subject identifiers/directories
        trial_filename (str): filename of trial on which to generate
            correlation data

    Returns:
        pandas.DataFrame melted correlation table
    """
    corr_df_list = []
    for d in subj_dirs:
        readpath = data_dir + d + '/' + trial_filename

        data = td.TrialData.from_pickle(readpath, d)
        corrs_us = pd.Series(data.get_corrs('us'))
        corrs_emg = pd.Series(data.get_corrs('emg'))

        df_corrs = pd.DataFrame({'us': corrs_us, 'emg': corrs_emg})
        df_corrs_melt = pd.melt(df_corrs.reset_index(),
                      id_vars='index',value_vars=['us','emg'])
        df_corrs_melt['subj'] = data.subj

        corr_df_list.append(df_corrs_melt)

    df_all_corrs = pd.concat(corr_df_list)

    return df_all_corrs


def gen_refined_corr_dfs(df_corr,
                         ang_corr_out_path=None,
                         subj_corr_out_path=None):
    """Generate print-ready angle/subject correlation tables for publication.

    Args:
        df_corr (pandas.DataFrame): general correlation table of all data
            streams generated by dataobj.data_utils.build_corr_table()
        ang_corr_out_path (str): output path for angle correlation CSV, if
            desired
        subj_corr_out_path (str): output path for subject correlation CSV, if
            desired

    Returns:
        pandas.DataFrame angle correlation table
        pandas.DataFrame subject correlation table
    """
    # extract only desired table rows (polyfits are omitted/nonsensical)
    df_corr_ref = df_corr.loc[[
        'emg-abs-bic', 'emg-abs-brd', 'us-csa', 'us-csa-dt', 'us-t', 'us-t-dt',
        'us-tr', 'us-tr-dt'
    ]]

    # rename with print-ready labels
    df_corr_ref.rename(index={
        'emg-abs-bic': 'sEMG-BIC',
        'emg-abs-brd': 'sEMG-BRD',
        'us-csa': 'CSA',
        'us-csa-dt': 'CSA-DT',
        'us-t': 'T',
        'us-t-dt': 'T-DT',
        'us-tr': 'AR',
        'us-tr-dt': 'AR-DT'
    },
                       inplace=True)

    # aggregate angle correlation data
    df_corr_ang = df_corr_ref[[
        'sub1wp1', 'sub1wp2', 'sub1wp5', 'sub1wp8', 'sub1wp10'
    ]]
    df_corr_ang.columns = ['25', '44', '69', '82', '97']
    if ang_corr_out_path:
        df_corr_ang.to_csv(ang_corr_out_path)

    df_corr_subj = df_corr_ref[[
        'sub1wp5', 'sub2wp5', 'sub3wp5', 'sub4wp5', 'sub5wp5'
    ]]
    df_corr_subj = df_corr_subj.loc[[
        'CSA', 'CSA-DT', 'T', 'T-DT', 'AR', 'AR-DT'
    ]]
    df_corr_subj.columns = ['Sub1', 'Sub2', 'Sub3', 'Sub4', 'Sub5']
    if subj_corr_out_path:
        df_corr_subj.to_csv(subj_corr_out_path)

    return df_corr_ang, df_corr_subj


def gen_ex_tracking_df(subj_dir):
    """Generate subject tracking error data frames from time series CSVs.

    This method generates tracking error (Jaccard distance, CSA, T, AR) data
    frames from raw time series CSV data for a single subject.

    Args:
        subj_dir (str): path to subject data directory, including final '/'

    Returns:
        pandas.DataFrame mean errors (Jaccard distance, CSA, T, AR)
        pandas.DataFrame standard deviation errors (Jaccard distance, CSA, T, AR)
    """
    df_iou = gen_jd_vals(subj_dir)
    df_csa = gen_def_err_vals(subj_dir, 'CSA')
    df_t = gen_def_err_vals(subj_dir, 'T')
    df_tr = gen_def_err_vals(subj_dir, 'AR')

    df_iou_mean = df_iou.mean().to_frame()
    df_csa_mean = df_csa.mean().to_frame()
    df_t_mean = df_t.mean().to_frame()
    df_tr_mean = df_tr.mean().to_frame()

    df_means = df_iou_mean.copy()
    df_means.rename(columns={0: 'Jaccard Distance'}, inplace=True)
    df_means['CSA'] = df_csa_mean[0]
    df_means['T'] = df_t_mean[0]
    df_means['AR'] = df_tr_mean[0]

    df_iou_std = df_iou.std().to_frame()
    df_csa_std = df_csa.std().to_frame()
    df_t_std = df_t.std().to_frame()
    df_tr_std = df_tr.std().to_frame()

    df_stds = df_iou_std.copy()
    df_stds.rename(columns={0: 'Jaccard Distance'}, inplace=True)
    df_stds['CSA'] = df_csa_std[0]
    df_stds['T'] = df_t_std[0]
    df_stds['AR'] = df_tr_std[0]

    return df_means, df_stds


def gen_tracking_dfs(subj_dirs, tracker_strings=TRACKER_STRINGS):
    """Generate Jaccard distance data frames from IoU time series CSVs.

    This method generates tracking error (Jaccard distance) data frames from
    raw IoU time series CSVs of multiple subjects.

    Args:
        subj_dirs (list): list of file paths to each IoU CSV, ordered Sub1-SubN
        tracker_strings (list): list of tracker string identifiers (i.e.,
            directory names)

    Returns:
        pandas.DataFrame mean Jaccard distance errors
        pandas.DataFrame standard deviation Jaccard distance errors
        pandas.DataFrame standard error Jaccard distance errors
    """
    # determine data columns
    cols = []
    for i, _ in enumerate(subj_dirs):
        cols.append('Sub' + str(i + 1))

    # initialize data frame
    df_means = pd.DataFrame(index=tracker_strings, columns=cols)
    df_stds = df_means.copy()
    df_sems = df_means.copy()

    # aggregate data from each subject
    for i, subj_dir in enumerate(subj_dirs):
        df_col = 'Sub' + str(i + 1)
        jds = gen_jd_vals(subj_dir)
        df_means[df_col] = jds.mean()
        df_stds[df_col] = jds.std()
        df_sems[df_col] = jds.sem()

    df_means = df_means.T
    df_stds = df_stds.T
    df_sems = df_sems.T

    return df_means, df_stds, df_sems


def gen_def_err_vals(subj_dir, metric, tracker_strings=TRACKER_STRINGS):
    """Aggregate table of per-frame deformation metric error for each tracker.

    Args:
        subj_dir (str): path to subject data directory, including final '/'
        metric (str): metric identifier ('CSA', 'T', or 'AR')
        tracker_strings (list): list of tracker string identifiers (i.e.,
            directory names)

    Returns:
        pandas.DataFrame of deformation metric errors, indexed by frame number
    """
    if metric == 'CSA':
        df_metric = pd.read_csv(subj_dir + 'ground_truth_csa.csv',
                                index_col=False,
                                header=0,
                                names=['GT'])
    elif metric == 'T':
        df_metric = pd.read_csv(subj_dir + 'ground_truth_thickness.csv',
                                index_col=False,
                                header=0,
                                names=['GT'])
    elif metric == 'AR':
        df_metric = pd.read_csv(subj_dir + 'ground_truth_thickness_ratio.csv',
                                index_col=False,
                                header=0,
                                names=['GT'])
    else:
        raise ValueError('unknown deformation metric')

    for tracker in tracker_strings:
        if metric == 'CSA':
            datapath = subj_dir + tracker + '/tracking_csa.csv'
        elif metric == 'T':
            datapath = subj_dir + tracker + '/tracking_thickness.csv'
        elif metric == 'AR':
            datapath = subj_dir + tracker + '/tracking_thickness_ratio.csv'
        else:
            raise ValueError('unknown deformation metric')

        df_metric[tracker] = pd.read_csv(datapath)

    df_metric = df_metric.loc[df_metric['GT'] > 0]

    for tracker in tracker_strings:
        df_metric[tracker] = abs(df_metric[tracker] -
                                 df_metric['GT']) / df_metric['GT']

    return df_metric


def gen_jd_vals(subj_dir, tracker_strings=TRACKER_STRINGS):
    """Aggregate table of per-frame Jaccard distance error for each tracker.

    Args:
        subj_dir (str): path to subject data directory, including final '/'
        tracker_strings (list): list of tracker string identifiers (i.e.,
            directory names)

    Returns:
        pandas.DataFrame of Jaccard distance errors, indexed by frame number
    """
    df_iou = pd.read_csv(subj_dir + 'LK/iou_series.csv',
                         index_col=False,
                         header=0,
                         names=['LK'])

    for tracker in tracker_strings:
        if tracker != 'LK':
            datapath_iou = subj_dir + tracker + '/iou_series.csv'
            df_iou[tracker] = pd.read_csv(datapath_iou)

    df_iou = df_iou.loc[df_iou['LK'] > 1e-3]

    for tracker in tracker_strings:
        df_iou[tracker] = 1 - df_iou[tracker]

    return df_iou
